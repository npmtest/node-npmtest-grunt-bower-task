{"/home/travis/build/npmtest/node-npmtest-grunt-bower-task/test.js":"/* istanbul instrument in package npmtest_grunt_bower_task */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-bower-task/lib.npmtest_grunt_bower_task.js":"/* istanbul instrument in package npmtest_grunt_bower_task */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_grunt_bower_task = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_grunt_bower_task = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-bower-task/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-grunt-bower-task && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_grunt_bower_task */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_grunt_bower_task\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_grunt_bower_task.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_grunt_bower_task.rollup.js'] =\n            local.assetsDict['/assets.npmtest_grunt_bower_task.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_grunt_bower_task.__dirname + '/lib.npmtest_grunt_bower_task.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-grunt-bower-task/node_modules/grunt-bower-task/Gruntfile.js":"/*\r\n * grunt-bower-task\r\n * https://github.com/yatskevich/grunt-bower-task\r\n *\r\n * Copyright (c) 2012-2013 Ivan Yatskevich\r\n * Licensed under the MIT license.\r\n */\r\n\r\n'use strict';\r\n\r\nmodule.exports = function(grunt) {\r\n\r\n  grunt.initConfig({\r\n    jshint: {\r\n      all: [ 'Gruntfile.js', 'tasks/**/*.js', 'test/**/*_test.js', 'specs/**/*.js' ],\r\n      options: {\r\n        jshintrc: '.jshintrc'\r\n      }\r\n    },\r\n\r\n    bower: {\r\n      install: {\r\n        options: {\r\n          cleanTargetDir: true,\r\n          cleanBowerDir: true,\r\n          install: true,\r\n          copy: true\r\n        }\r\n      },\r\n      cleanup: {\r\n        options: {\r\n          cleanTargetDir: true,\r\n          cleanBowerDir: true,\r\n          install: false,\r\n          copy: false\r\n        }\r\n      }\r\n    },\r\n\r\n    nodeunit: {\r\n      tests: ['test/*_test.js']\r\n    },\r\n\r\n    simplemocha: {\r\n      options: {\r\n        timeout: '2s',\r\n        reporter: 'nyan'\r\n      },\r\n\r\n      all: { src: ['specs/**/*.js'] }\r\n    }\r\n\r\n\r\n  });\r\n\r\n  grunt.loadTasks('tasks');\r\n\r\n  grunt.loadNpmTasks('grunt-contrib-jshint');\r\n  grunt.loadNpmTasks('grunt-simple-mocha');\r\n  grunt.loadNpmTasks('grunt-contrib-nodeunit');\r\n\r\n  grunt.registerTask('test', ['jshint', 'nodeunit', 'simplemocha']);\r\n\r\n  grunt.registerTask('default', ['test']);\r\n\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-grunt-bower-task/node_modules/grunt-bower-task/tasks/bower_task.js":"/*\r\n * grunt-bower-task v0.5.0 (https://github.com/yatskevich/grunt-bower-task)\r\n * Copyright 2012-2016 Ivan Yatskevich\r\n * Licensed under the MIT license.\r\n */\r\n\r\n\"use strict\";\r\n\r\nmodule.exports = function (grunt) {\r\n\r\n  var bower,\r\n    path,\r\n    async,\r\n    colors,\r\n    rimraf,\r\n    validator,\r\n    BowerAssets,\r\n    AssetCopier,\r\n    LayoutsManager;\r\n\r\n    /* ===============================================\r\n                      Helper Methods\r\n       =============================================*/\r\n    function requireDependencies() {\r\n    bower = require(\"bower\");\r\n    path = require(\"path\");\r\n    async = require(\"async\");\r\n    colors = require(\"colors\");\r\n    rimraf = require(\"rimraf\").sync;\r\n    validator = require('bower-json');\r\n    BowerAssets = require(\"./lib/bower_assets\");\r\n    AssetCopier = require(\"./lib/asset_copier\");\r\n    LayoutsManager = require(\"./lib/layouts_manager\");\r\n  }\r\n\r\n  function log(message) {\r\n    log.logger.writeln(message);\r\n  }\r\n\r\n  function validate(options) {\r\n    var bowerFile = bower.config.json || \"bower.json\";\r\n\r\n    validator.read(bowerFile, function (error, json) {\r\n      if (error) {\r\n        console.error(\"bower.json validation: Failed - \" + error.message);\r\n      }\r\n      else {\r\n        if (options.verbose) {\r\n          console.info(\"bower.json validation: Passed\");\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  /* ===============================================\r\n                    Core Methods\r\n    =============================================*/\r\n\r\n  function clean(dir, callback) {\r\n    rimraf(dir);\r\n    callback();\r\n  }\r\n\r\n  function copy(options, callback) {\r\n    var bowerAssets = new BowerAssets(bower, options.cwd);\r\n    bowerAssets.on(\"end\", function (assets) {\r\n      var copier = new AssetCopier(assets, options, function (source, destination, isFile) {\r\n        log(\"grunt-bower \" + \"copying \".cyan + ((isFile ? \"\" : \" dir \") + source + \" -> \" + destination).grey);\r\n      });\r\n\r\n      copier.once(\"copied\", callback);\r\n      copier.copy();\r\n    }).get();\r\n  }\r\n\r\n  function fail(error) {\r\n    grunt.fail.fatal(error);\r\n  }\r\n\r\n  function install(options, callback) {\r\n\r\n    validate(options);\r\n\r\n    bower.commands.install([], options.bowerOptions)\r\n      .on(\"log\", function(result) {\r\n        log([\"bower\", result.id.cyan, result.message].join(\" \"));\r\n      })\r\n      .on(\"error\", fail)\r\n      .on(\"end\", callback);\r\n  }\r\n\r\n\r\n\r\n  function prune(options, callback) {\r\n    bower.commands.prune([], options.bowerOptions)\r\n      .on(\"log\", function (result) {\r\n        log([\"bower\", result.id.cyan, result.message].join(\" \"));\r\n      })\r\n      .on(\"error\", fail)\r\n      .on(\"end\", callback);\r\n  }\r\n\r\n  grunt.registerMultiTask(\"bower\", \"Install Bower packages.\", function () {\r\n    var tasks = [],\r\n      done = this.async(),\r\n      options = this.options({\r\n        cleanTargetDir: false,\r\n        cleanBowerDir: false,\r\n        targetDir: \"./lib\",\r\n        layout: \"byType\",\r\n        install: true,\r\n        prune: false,\r\n        verbose: false,\r\n        copy: false,\r\n        bowerOptions: {}\r\n      }),\r\n      add = function (successMessage, fn) {\r\n        tasks.push(function (callback) {\r\n          fn(function () {\r\n            grunt.log.ok(successMessage);\r\n            callback();\r\n          });\r\n        });\r\n      },\r\n      bowerDir,\r\n      targetDir;\r\n\r\n    // calling require on the dependencies has been delayed to prevent slow\r\n    // dependencies delaying the startup of grunt even if this task is not used\r\n    // at all\r\n    requireDependencies();\r\n\r\n    bowerDir = path.resolve(bower.config.directory);\r\n    targetDir = path.resolve(options.targetDir);\r\n\r\n    log.logger = options.verbose ? grunt.log : grunt.verbose;\r\n    options.layout = LayoutsManager.getLayout(options.layout, fail);\r\n    options.cwd = grunt.option(\"base\") || process.cwd();\r\n\r\n    if (options.cleanup !== undefined) {\r\n      options.cleanTargetDir = options.cleanBowerDir = options.cleanup;\r\n    }\r\n\r\n    if (options.cleanTargetDir) {\r\n      add(\"Cleaned target dir \" + targetDir.grey, function (callback) {\r\n        clean(targetDir, callback);\r\n      });\r\n    }\r\n\r\n    if (options.install) {\r\n      add(\"Installed bower packages\", function (callback) {\r\n        install(options, callback);\r\n      });\r\n    }\r\n\r\n    if (options.prune) {\r\n      add(\"Pruned bower packages\", function (callback) {\r\n        prune(options, callback);\r\n      });\r\n    }\r\n\r\n    if (options.copy) {\r\n      add(\"Copied packages to \" + targetDir.grey, function (callback) {\r\n        copy(options, callback);\r\n      });\r\n    }\r\n\r\n    if (options.cleanBowerDir) {\r\n      add(\"Cleaned bower dir \" + bowerDir.grey, function (callback) {\r\n        clean(bowerDir, callback);\r\n      });\r\n    }\r\n\r\n    async.series(tasks, done);\r\n  });\r\n\r\n\r\n};\r\n","/home/travis/build/npmtest/node-npmtest-grunt-bower-task/node_modules/grunt-bower-task/tasks/lib/layouts_manager.js":"var _ = require('lodash');\r\nvar path = require('path');\r\n\r\nvar handleUntyped = function(layout) {\r\n  return function(type, pkg) {\r\n    if (type === '__untyped__') {\r\n      return pkg;\r\n    }\r\n    return layout(type, pkg);\r\n  };\r\n};\r\n\r\nvar defaultLayouts = {\r\n  byType: handleUntyped(function(type, pkg) {\r\n    return path.join(type, pkg);\r\n  }),\r\n\r\n  byComponent: handleUntyped(function(type, pkg) {\r\n    return path.join(pkg, type);\r\n  })\r\n};\r\n\r\nmodule.exports = {\r\n\r\n  /**\r\n   * Resolves named layouts, returns functions as is\r\n   *\r\n   * @param {string | Function} layout name or layout function\r\n   * @param { Function } fail handler\r\n   * @returns {Function} layout function\r\n   */\r\n  getLayout: function(layout, fail) {\r\n    if (_.isFunction(layout)) {\r\n      return layout;\r\n    }\r\n\r\n    if (!_.isString(layout)) {\r\n      fail('Layout should be specified by name or as a function');\r\n    }\r\n\r\n    if (_(defaultLayouts).has(layout)) {\r\n      return defaultLayouts[layout];\r\n    }\r\n\r\n    fail('The following named layouts are supported: ' + _.keys(defaultLayouts).join(', '));\r\n  }\r\n\r\n};","/home/travis/build/npmtest/node-npmtest-grunt-bower-task/node_modules/grunt-bower-task/tasks/lib/package_matcher.js":"module.exports = {\r\n\r\n  /**\r\n   * @param pkg - Bower package name\r\n   * @param override_key - can be an exact package name, simplified wildcard or true RegExp\r\n   * @returns {boolean}\r\n   */\r\n  matches: function(pkg, override_key) {\r\n    if (pkg === override_key) {\r\n      return true;\r\n    }\r\n\r\n    if (override_key.match(/^\\/.*\\/$/)) {\r\n      var trueRegexMatcher = new RegExp(override_key.replace(/^\\/|\\/$/g, ''));\r\n      return trueRegexMatcher.test(pkg);\r\n    }\r\n\r\n    if (override_key.indexOf('*') >= 0) {\r\n      override_key = override_key.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&').replace('*', '.+');\r\n      var wildcardMatcher = new RegExp(override_key);\r\n      return wildcardMatcher.test(pkg);\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n};\r\n"}